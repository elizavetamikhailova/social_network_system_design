openapi: 3.0.4
info:
  title: Swagger System Design - OpenAPI 3.0
  description: |-
    System Design социальной сети для путешественников для курса по System Design https://balun.courses
  version: 1.0.0
servers:
  - url: https://adventure.wholeworld.com/api/v1
tags:
  - name: post
    description: Создание и просмотр постов
  - name: photos
    description: Загрузка и получение фото
  - name: reactions
    description: Создание реакций (комментарий + оценка)
  - name: comments
    description: Создание комментариев
  - name: subscription
    description: Возможность подписаться
  - name: search
    description: Поиск постов по локации и названию мест
  - name: feed
    description: Просмотр ленты 
paths:
  /posts/createPost:
    post:
      tags:
        - post
      summary: Создание поста
      description: Выложить пост
      operationId: createPost
      requestBody:
        description: Тело поста
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostBody'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /photos/uploadPhoto:
    post:
      tags:
        - photos
      summary: Загрузить фото
      description: Загружает фото и возвращает ссылку на него
      operationId: uploadPhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: Файл с изображением
                post_id:
                  type: integer
                  format: int64
                  example: 10
            encoding:
              file:
                contentType: image/jpeg, image/png, image/webp
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
                default:
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reactions/sendReaction:
    post:
      tags:
        - reactions
      summary: Оставить реакцию (комментарий + оценка)
      description: Оставить реакцию на какой-то пост
      operationId: sendReaction
      requestBody:
        description: Тело реакции
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendReactionBody'
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reactions/getReactions/{post_id}:
    get:
      tags:
        - reactions
      summary: Получить реакции (комментарий + оценка)
      description: Получить реакции по какому-то посту
      operationId: getReactions
      parameters:
        - name: post_id
          in: path
          description: id поста, к которому нужно получить реакции
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reaction'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /comments/sendComment:
    post:
      tags:
        - comments
      summary: Оставить комментарий
      description: Оставить комментарий к какому-то посту
      operationId: sendComment
      requestBody:
        description: Тело комментария
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendCommentBody'
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /comments/getComments/{post_id}:
    get:
      tags:
        - comments
      summary: Получить комментарии к посту
      description: Получить комментарии к какому-то посту
      operationId: getComments
      parameters:
        - name: post_id
          in: path
          description: id поста, к которому нужно получить комментарии
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /feed/getFeed:
    get:
      tags:
        - feed
      summary: Получение ленты для пользователя
      description: Возвращает список постов, используя курсорную пагинацию
      operationId: getFeed
      parameters:
        - in: query
          name: limit
          description: Max items to return (1..100). Default 20.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: cursor
          required: false
          schema:
            type: string
        - in: query
          name: before
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          headers:
            X-Request-Id:
              description: Request correlation id
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    CreatePostBody:
      required:
          - photo_urls
          - description
          - latitude
          - longtitude
      type: object
      properties:
        photo_urls:
          type: array
          items:
            type: string
        description:
          type: string
          example: "сущность в виде гномика"
        latitude:
          type: number
          format: double
          example: 43.77125872427964
        longtitude:
          type: number
          format: double
          example: 11.26393917073614
    Post:
      required:
        - id
        - user_id
        - photo_urls
        - description
        - latitude
        - longtitude
        - time
      type: object
      properties:
        id:
            type: integer
            format: int64
            example: 10
        user_id:
            type: integer
            format: int64
            example: 10
        photo_urls:
          type: array
          items:
            type: string
        description:
          type: string
          example: "сущность в виде гномика"
        latitude:
          type: number
          format: double
          example: 43.77125872427964
        longtitude:
          type: number
          format: double
          example: 11.26393917073614
        time:
          type: string
          format: date-time
          example: "2024-10-27T10:30:00Z"
    SendReactionBody:
      required:
        - post_id
        - rate
        - comment
      type: object
      properties:
        post_id:
          type: integer
          format: int64
          example: 10
        rate:
          type: integer
          format: int64
          example: 5
        comment:
          type: string
          example: "Великолепно!"
    Reaction:
      required:
        - id
        - user
        - rate
        - comment
      type: object
      properties:
        user: 
          $ref: '#/components/schemas/User'
        id:
          type: integer
          format: int64
          example: 10
        rate:
          type: integer
          format: int64
          example: 5
        comment:
          type: string
          example: "Великолепно!"
    User:
      required:
        - nickname
        - user_id
        - avatar_url
      type: object
      properties:
        nickname:
          type: string
          example: "super_traveler"
        user_id:
          type: integer
          format: int64
          example: 10
        avatar_url:
          type: string
          example: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTrxOTdBgCXwbUydQIy_30TzwBYJ6wrUhF78A&s"
    SendCommentBody:
      required:
        - post_id
        - text
      type: object
      properties:
        post_id:
          type: integer
          format: int64
          example: 10
        text:
          type: string
          example: "Хороший пост!"
    Comment:
      required:
        - user
        - id
        - text
      type: object
      properties:
        user: 
          $ref: '#/components/schemas/User'
        id:
          type: integer
          format: int64
          example: 10
        text:
          type: string
          example: "Хороший пост!"
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    Photo:
      type: object
      required:
        - post_id
        - url
      properties:
        post_id:
          type: integer
          format: int64
          example: 10
        url:
          type: string
          example: "url"
    Feed: 
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        nextCursor: 
          type: string
          example: "eyJ0czoiMjAyNS0xMC0xOVQxNTowMToyMloiLCJpZCI6InBzdF8wMUo5QVgzR1EzRTIifQ=="
        hasMore: 
          type: boolean
          example: true
      
  requestBodies:
    CreatePostBody:
      description: Сущность для сохранения поста
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePostBody'
    SendReactionBody:
      description: Сущность для отправки реакции
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SendReactionBody'
    SendCommentBody:
      description: Сущность для отправки комментария
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SendCommentBody'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
